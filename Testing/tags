!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BATCH	All/MCP_lib/PCA9685.h	/^    BATCH=1,$/;"	e	enum:__anon24
BATCH	All/Open_source_lib/PCA9685.h	/^    BATCH=1,$/;"	e	enum:__anon1
BATCH	Test-switch/main.c	/^    BATCH=1,$/;"	e	enum:__anon25	file:
CALLING_CONVENTION	All/MCP_lib/mcp2221_dll_um.h	38;"	d
DEBUG_INFO_HID	All/Open_source_lib/libmcp2221.c	18;"	d	file:
DEVICE_STRING_COUNT	All/Open_source_lib/hid.c	/^	DEVICE_STRING_COUNT,$/;"	e	enum:device_string_id	file:
DEVICE_STRING_MANUFACTURER	All/Open_source_lib/hid.c	/^	DEVICE_STRING_MANUFACTURER,$/;"	e	enum:device_string_id	file:
DEVICE_STRING_PRODUCT	All/Open_source_lib/hid.c	/^	DEVICE_STRING_PRODUCT,$/;"	e	enum:device_string_id	file:
DEVICE_STRING_SERIAL	All/Open_source_lib/hid.c	/^	DEVICE_STRING_SERIAL,$/;"	e	enum:device_string_id	file:
E_ERR_ADDRESS_NACK	All/MCP_lib/mcp2221_dll_um.h	171;"	d
E_ERR_BLOCK_SIZE_MISMATCH	All/MCP_lib/mcp2221_dll_um.h	182;"	d
E_ERR_CLOSE_FAILED	All/MCP_lib/mcp2221_dll_um.h	160;"	d
E_ERR_CMD_FAILED	All/MCP_lib/mcp2221_dll_um.h	132;"	d
E_ERR_CONNECTION_ALREADY_OPENED	All/MCP_lib/mcp2221_dll_um.h	158;"	d
E_ERR_COPY_RX_DATA_FAILED	All/MCP_lib/mcp2221_dll_um.h	175;"	d
E_ERR_COPY_TX_DATA_FAILED	All/MCP_lib/mcp2221_dll_um.h	177;"	d
E_ERR_DESTINATION_TOO_SMALL	All/MCP_lib/mcp2221_dll_um.h	141;"	d
E_ERR_DEVICE_NOT_FOUND	All/MCP_lib/mcp2221_dll_um.h	151;"	d
E_ERR_FLASH_WRITE_FAILED	All/MCP_lib/mcp2221_dll_um.h	143;"	d
E_ERR_FLASH_WRITE_PROTECTED	All/MCP_lib/mcp2221_dll_um.h	137;"	d
E_ERR_I2C_BUSY	All/MCP_lib/mcp2221_dll_um.h	168;"	d
E_ERR_I2C_READ_ERROR	All/MCP_lib/mcp2221_dll_um.h	170;"	d
E_ERR_INPUT_TOO_LARGE	All/MCP_lib/mcp2221_dll_um.h	142;"	d
E_ERR_INTERNAL_BUFFER_TOO_SMALL	All/MCP_lib/mcp2221_dll_um.h	154;"	d
E_ERR_INVALID_ADDRESS	All/MCP_lib/mcp2221_dll_um.h	167;"	d
E_ERR_INVALID_BYTE_NUMBER	All/MCP_lib/mcp2221_dll_um.h	166;"	d
E_ERR_INVALID_HANDLE	All/MCP_lib/mcp2221_dll_um.h	133;"	d
E_ERR_INVALID_PARAMETER	All/MCP_lib/mcp2221_dll_um.h	134;"	d
E_ERR_INVALID_PASS	All/MCP_lib/mcp2221_dll_um.h	135;"	d
E_ERR_INVALID_PEC	All/MCP_lib/mcp2221_dll_um.h	180;"	d
E_ERR_INVALID_SPEED	All/MCP_lib/mcp2221_dll_um.h	164;"	d
E_ERR_MALLOC	All/MCP_lib/mcp2221_dll_um.h	144;"	d
E_ERR_NO_EFFECT	All/MCP_lib/mcp2221_dll_um.h	179;"	d
E_ERR_NO_SUCH_INDEX	All/MCP_lib/mcp2221_dll_um.h	149;"	d
E_ERR_NULL	All/MCP_lib/mcp2221_dll_um.h	139;"	d
E_ERR_OPEN_DEVICE_ERROR	All/MCP_lib/mcp2221_dll_um.h	156;"	d
E_ERR_PASSWORD_LIMIT_REACHED	All/MCP_lib/mcp2221_dll_um.h	136;"	d
E_ERR_RAW_RX_COPYFAILED	All/MCP_lib/mcp2221_dll_um.h	187;"	d
E_ERR_RAW_TX_COPYFAILED	All/MCP_lib/mcp2221_dll_um.h	186;"	d
E_ERR_RAW_TX_TOO_LARGE	All/MCP_lib/mcp2221_dll_um.h	185;"	d
E_ERR_SPEED_NOT_SET	All/MCP_lib/mcp2221_dll_um.h	165;"	d
E_ERR_TIMEOUT	All/MCP_lib/mcp2221_dll_um.h	172;"	d
E_ERR_TOO_MANY_RX_BYTES	All/MCP_lib/mcp2221_dll_um.h	173;"	d
E_ERR_UNKOWN_ERROR	All/MCP_lib/mcp2221_dll_um.h	131;"	d
E_NO_ERR	All/MCP_lib/mcp2221_dll_um.h	130;"	d
FLASH_SECTION_CHIPSETTINGS	All/Open_source_lib/libmcp2221.c	/^	FLASH_SECTION_CHIPSETTINGS		= 0x00,$/;"	e	enum:__anon3	file:
FLASH_SECTION_FACTORYSERIAL	All/Open_source_lib/libmcp2221.c	/^	FLASH_SECTION_FACTORYSERIAL		= 0x05,$/;"	e	enum:__anon3	file:
FLASH_SECTION_GPIOSETTINGS	All/Open_source_lib/libmcp2221.c	/^	FLASH_SECTION_GPIOSETTINGS		= 0x01,$/;"	e	enum:__anon3	file:
FLASH_SECTION_USBMANUFACTURER	All/Open_source_lib/libmcp2221.c	/^	FLASH_SECTION_USBMANUFACTURER	= 0x02,$/;"	e	enum:__anon3	file:
FLASH_SECTION_USBPRODUCT	All/Open_source_lib/libmcp2221.c	/^	FLASH_SECTION_USBPRODUCT		= 0x03,$/;"	e	enum:__anon3	file:
FLASH_SECTION_USBSERIAL	All/Open_source_lib/libmcp2221.c	/^	FLASH_SECTION_USBSERIAL			= 0x04,$/;"	e	enum:__anon3	file:
FLASH_SETTINGS	All/MCP_lib/mcp2221_dll_um.h	194;"	d
HIDAPI_H__	All/Open_source_lib/hidapi.h	28;"	d
HIDIOCGFEATURE	All/Open_source_lib/hid.c	54;"	d	file:
HIDIOCSFEATURE	All/Open_source_lib/hid.c	51;"	d	file:
HID_API_CALL	All/Open_source_lib/hidapi.h	36;"	d
HID_API_CALL	All/Open_source_lib/hidapi.h	39;"	d
HID_API_EXPORT	All/Open_source_lib/hidapi.h	35;"	d
HID_API_EXPORT	All/Open_source_lib/hidapi.h	38;"	d
HID_API_EXPORT_CALL	All/Open_source_lib/hidapi.h	42;"	d
HID_REPORT_SIZE	All/Open_source_lib/libmcp2221.c	20;"	d	file:
INTERRUPT_BOTH_EDGES	All/MCP_lib/mcp2221_dll_um.h	224;"	d
INTERRUPT_NEGATIVE_EDGE	All/MCP_lib/mcp2221_dll_um.h	223;"	d
INTERRUPT_NONE	All/MCP_lib/mcp2221_dll_um.h	221;"	d
INTERRUPT_POSITIVE_EDGE	All/MCP_lib/mcp2221_dll_um.h	222;"	d
LED_0_start	All/MCP_lib/PCA9685.h	21;"	d
LED_0_start	All/Open_source_lib/PCA9685.h	22;"	d
LED_0_start	LUT_PCA9685_reg.c	4;"	d	file:
LED_multiplier	All/MCP_lib/PCA9685.h	22;"	d
LED_multiplier	All/Open_source_lib/PCA9685.h	23;"	d
LED_multiplier	LUT_PCA9685_reg.c	5;"	d	file:
LIBMCP2221_H_	All/Open_source_lib/libmcp2221.h	10;"	d
LIB_EXPORT	All/Open_source_lib/libmcp2221.c	23;"	d	file:
LIB_EXPORT	All/Open_source_lib/libmcp2221.c	25;"	d	file:
MCP2221_ADC_COUNT	All/Open_source_lib/libmcp2221.h	18;"	d
MCP2221_ADC_REF_1024	All/Open_source_lib/libmcp2221.h	/^	MCP2221_ADC_REF_1024 = 3,	\/**< 1024mV Reference *\/$/;"	e	enum:__anon7
MCP2221_ADC_REF_2048	All/Open_source_lib/libmcp2221.h	/^	MCP2221_ADC_REF_2048 = 5,	\/**< 2048mV Reference *\/$/;"	e	enum:__anon7
MCP2221_ADC_REF_4096	All/Open_source_lib/libmcp2221.h	/^	MCP2221_ADC_REF_4096 = 7,	\/**< 4096mV Reference *\/$/;"	e	enum:__anon7
MCP2221_ADC_REF_OFF	All/Open_source_lib/libmcp2221.h	/^	MCP2221_ADC_REF_OFF = 1,	\/**< No reference *\/$/;"	e	enum:__anon7
MCP2221_ADC_REF_VDD	All/Open_source_lib/libmcp2221.h	/^	MCP2221_ADC_REF_VDD = 0		\/**< VDD Reference *\/$/;"	e	enum:__anon7
MCP2221_CLKDIV_128	All/Open_source_lib/libmcp2221.h	/^	MCP2221_CLKDIV_128 = 7,			\/**< 375KHz *\/$/;"	e	enum:__anon14
MCP2221_CLKDIV_16	All/Open_source_lib/libmcp2221.h	/^	MCP2221_CLKDIV_16 = 4,			\/**< 3MHz *\/$/;"	e	enum:__anon14
MCP2221_CLKDIV_2	All/Open_source_lib/libmcp2221.h	/^	MCP2221_CLKDIV_2 = 1,			\/**< 24MHz *\/$/;"	e	enum:__anon14
MCP2221_CLKDIV_32	All/Open_source_lib/libmcp2221.h	/^	MCP2221_CLKDIV_32 = 5,			\/**< 1.5MHz *\/$/;"	e	enum:__anon14
MCP2221_CLKDIV_4	All/Open_source_lib/libmcp2221.h	/^	MCP2221_CLKDIV_4 = 2,			\/**< 12MHz *\/$/;"	e	enum:__anon14
MCP2221_CLKDIV_64	All/Open_source_lib/libmcp2221.h	/^	MCP2221_CLKDIV_64 = 6,			\/**< 750KHz *\/$/;"	e	enum:__anon14
MCP2221_CLKDIV_8	All/Open_source_lib/libmcp2221.h	/^	MCP2221_CLKDIV_8 = 3,			\/**< 6MHz *\/$/;"	e	enum:__anon14
MCP2221_CLKDIV_RESERVED	All/Open_source_lib/libmcp2221.h	/^	MCP2221_CLKDIV_RESERVED = 0,	\/**< Invalid *\/$/;"	e	enum:__anon14
MCP2221_CLKDUTY_0	All/Open_source_lib/libmcp2221.h	/^	MCP2221_CLKDUTY_0 = 0x00,		\/**< 0% duty cycle, disabled *\/$/;"	e	enum:__anon15
MCP2221_CLKDUTY_25	All/Open_source_lib/libmcp2221.h	/^	MCP2221_CLKDUTY_25 = 0x08,		\/**< 25% *\/$/;"	e	enum:__anon15
MCP2221_CLKDUTY_50	All/Open_source_lib/libmcp2221.h	/^	MCP2221_CLKDUTY_50 = 0x10,		\/**< 50% *\/$/;"	e	enum:__anon15
MCP2221_CLKDUTY_75	All/Open_source_lib/libmcp2221.h	/^	MCP2221_CLKDUTY_75 = 0x18		\/**< 75% *\/$/;"	e	enum:__anon15
MCP2221_DAC_MAX	All/Open_source_lib/libmcp2221.h	17;"	d
MCP2221_DAC_REF_1024	All/Open_source_lib/libmcp2221.h	/^	MCP2221_DAC_REF_1024 = 3,	\/**< 1024mV Reference *\/$/;"	e	enum:__anon6
MCP2221_DAC_REF_2048	All/Open_source_lib/libmcp2221.h	/^	MCP2221_DAC_REF_2048 = 5,	\/**< 2048mV Reference *\/$/;"	e	enum:__anon6
MCP2221_DAC_REF_4096	All/Open_source_lib/libmcp2221.h	/^	MCP2221_DAC_REF_4096 = 7,	\/**< 4096mV Reference *\/$/;"	e	enum:__anon6
MCP2221_DAC_REF_OFF	All/Open_source_lib/libmcp2221.h	/^	MCP2221_DAC_REF_OFF = 1,	\/**< No reference *\/$/;"	e	enum:__anon6
MCP2221_DAC_REF_VDD	All/Open_source_lib/libmcp2221.h	/^	MCP2221_DAC_REF_VDD = 0		\/**< VDD Reference *\/$/;"	e	enum:__anon6
MCP2221_DEDIPIN_LEDI2C	All/Open_source_lib/libmcp2221.h	/^	MCP2221_DEDIPIN_LEDI2C = 4,$/;"	e	enum:__anon17
MCP2221_DEDIPIN_LEDUARTRX	All/Open_source_lib/libmcp2221.h	/^	MCP2221_DEDIPIN_LEDUARTRX = 6,$/;"	e	enum:__anon17
MCP2221_DEDIPIN_LEDUARTTX	All/Open_source_lib/libmcp2221.h	/^	MCP2221_DEDIPIN_LEDUARTTX = 5,$/;"	e	enum:__anon17
MCP2221_DEDIPIN_SSPND	All/Open_source_lib/libmcp2221.h	/^	MCP2221_DEDIPIN_SSPND = 3,$/;"	e	enum:__anon17
MCP2221_DEDIPIN_USBCFG	All/Open_source_lib/libmcp2221.h	/^	MCP2221_DEDIPIN_USBCFG = 2$/;"	e	enum:__anon17
MCP2221_DEFAULT_MANUFACTURER	All/Open_source_lib/libmcp2221.h	22;"	d
MCP2221_DEFAULT_PID	All/Open_source_lib/libmcp2221.h	21;"	d
MCP2221_DEFAULT_PRODUCT	All/Open_source_lib/libmcp2221.h	23;"	d
MCP2221_DEFAULT_VID	All/Open_source_lib/libmcp2221.h	20;"	d
MCP2221_DLL_UM_API	All/MCP_lib/mcp2221_dll_um.h	29;"	d
MCP2221_DLL_UM_API	All/MCP_lib/mcp2221_dll_um.h	31;"	d
MCP2221_DLL_UM_API	All/MCP_lib/mcp2221_dll_um.h	35;"	d
MCP2221_ERROR	All/Open_source_lib/libmcp2221.h	/^	MCP2221_ERROR = -1,			\/**< General error *\/$/;"	e	enum:__anon4
MCP2221_ERROR_HID	All/Open_source_lib/libmcp2221.h	/^	MCP2221_ERROR_HID = -3		\/**< HIDAPI returned an error *\/$/;"	e	enum:__anon4
MCP2221_GPDIR_INPUT	All/MCP_lib/mcp2221_dll_um.h	215;"	d
MCP2221_GPDIR_OUTPUT	All/MCP_lib/mcp2221_dll_um.h	216;"	d
MCP2221_GPFUNC_IO	All/MCP_lib/mcp2221_dll_um.h	200;"	d
MCP2221_GPIO0	All/Open_source_lib/libmcp2221.h	/^	MCP2221_GPIO0 = 1,	\/**< GPIO0 *\/$/;"	e	enum:__anon18
MCP2221_GPIO1	All/Open_source_lib/libmcp2221.h	/^	MCP2221_GPIO1 = 2,	\/**< GPIO1 *\/$/;"	e	enum:__anon18
MCP2221_GPIO2	All/Open_source_lib/libmcp2221.h	/^	MCP2221_GPIO2 = 4,	\/**< GPIO2 *\/$/;"	e	enum:__anon18
MCP2221_GPIO3	All/Open_source_lib/libmcp2221.h	/^	MCP2221_GPIO3 = 8	\/**< GPIO3 *\/$/;"	e	enum:__anon18
MCP2221_GPIO_COUNT	All/Open_source_lib/libmcp2221.h	16;"	d
MCP2221_GPIO_DIR_INPUT	All/Open_source_lib/libmcp2221.h	/^	MCP2221_GPIO_DIR_INPUT = 1,			\/**< Input *\/$/;"	e	enum:__anon11
MCP2221_GPIO_DIR_INVALID	All/Open_source_lib/libmcp2221.h	/^	MCP2221_GPIO_DIR_INVALID = 0xEF		\/**< GPIO is not set as an input or output *\/$/;"	e	enum:__anon11
MCP2221_GPIO_DIR_OUTPUT	All/Open_source_lib/libmcp2221.h	/^	MCP2221_GPIO_DIR_OUTPUT = 0,		\/**< Output *\/$/;"	e	enum:__anon11
MCP2221_GPIO_MODE_ADC	All/Open_source_lib/libmcp2221.h	105;"	d
MCP2221_GPIO_MODE_ALT1	All/Open_source_lib/libmcp2221.h	/^	MCP2221_GPIO_MODE_ALT1 = 2,			\/**< Alternative function 1 *\/$/;"	e	enum:__anon9
MCP2221_GPIO_MODE_ALT2	All/Open_source_lib/libmcp2221.h	/^	MCP2221_GPIO_MODE_ALT2 = 3,			\/**< Alternative function 2 *\/$/;"	e	enum:__anon9
MCP2221_GPIO_MODE_ALT3	All/Open_source_lib/libmcp2221.h	/^	MCP2221_GPIO_MODE_ALT3 = 4,			\/**< Alternative function 3 *\/$/;"	e	enum:__anon9
MCP2221_GPIO_MODE_DAC	All/Open_source_lib/libmcp2221.h	106;"	d
MCP2221_GPIO_MODE_DEDI	All/Open_source_lib/libmcp2221.h	/^	MCP2221_GPIO_MODE_DEDI = 1,			\/**< Dedicated function *\/$/;"	e	enum:__anon9
MCP2221_GPIO_MODE_GPIO	All/Open_source_lib/libmcp2221.h	/^	MCP2221_GPIO_MODE_GPIO = 0,			\/**< Normal IO, manually set to input\/output, high\/low *\/$/;"	e	enum:__anon9
MCP2221_GPIO_MODE_INVALID	All/Open_source_lib/libmcp2221.h	/^	MCP2221_GPIO_MODE_INVALID = 0xff	\/**< Invalid *\/$/;"	e	enum:__anon9
MCP2221_GPIO_MODE_IOC	All/Open_source_lib/libmcp2221.h	107;"	d
MCP2221_GPIO_MODE_SSPND	All/Open_source_lib/libmcp2221.h	104;"	d
MCP2221_GPIO_VALUE_HIGH	All/Open_source_lib/libmcp2221.h	/^	MCP2221_GPIO_VALUE_HIGH = 1,		\/**< GPIO pin reads HIGH *\/$/;"	e	enum:__anon10
MCP2221_GPIO_VALUE_INVALID	All/Open_source_lib/libmcp2221.h	/^	MCP2221_GPIO_VALUE_INVALID = 0xEE	\/**< GPIO is not set as an input or output *\/$/;"	e	enum:__anon10
MCP2221_GPIO_VALUE_LOW	All/Open_source_lib/libmcp2221.h	/^	MCP2221_GPIO_VALUE_LOW = 0,			\/**< GPIO pin reads LOW *\/$/;"	e	enum:__anon10
MCP2221_GPVAL_HIGH	All/MCP_lib/mcp2221_dll_um.h	218;"	d
MCP2221_GPVAL_LOW	All/MCP_lib/mcp2221_dll_um.h	219;"	d
MCP2221_GP_ADC	All/MCP_lib/mcp2221_dll_um.h	208;"	d
MCP2221_GP_CLOCK_OUT	All/MCP_lib/mcp2221_dll_um.h	203;"	d
MCP2221_GP_DAC	All/MCP_lib/mcp2221_dll_um.h	211;"	d
MCP2221_GP_IOC	All/MCP_lib/mcp2221_dll_um.h	213;"	d
MCP2221_GP_LED_I2C	All/MCP_lib/mcp2221_dll_um.h	205;"	d
MCP2221_GP_LED_UART_RX	All/MCP_lib/mcp2221_dll_um.h	207;"	d
MCP2221_GP_LED_UART_TX	All/MCP_lib/mcp2221_dll_um.h	210;"	d
MCP2221_GP_SSPND	All/MCP_lib/mcp2221_dll_um.h	202;"	d
MCP2221_GP_USBCFG	All/MCP_lib/mcp2221_dll_um.h	204;"	d
MCP2221_I2CRW_NORMAL	All/Open_source_lib/libmcp2221.h	/^	MCP2221_I2CRW_NORMAL = 0,$/;"	e	enum:__anon16
MCP2221_I2CRW_NOSTOP	All/Open_source_lib/libmcp2221.h	/^	MCP2221_I2CRW_NOSTOP = 2$/;"	e	enum:__anon16
MCP2221_I2CRW_REPEATED	All/Open_source_lib/libmcp2221.h	/^	MCP2221_I2CRW_REPEATED = 1,$/;"	e	enum:__anon16
MCP2221_I2C_ADDRNOTFOUND	All/Open_source_lib/libmcp2221.h	/^	MCP2221_I2C_ADDRNOTFOUND = 37, \/\/ WR NACK$/;"	e	enum:__anon5
MCP2221_I2C_DATAREADY	All/Open_source_lib/libmcp2221.h	/^	MCP2221_I2C_DATAREADY = 85,$/;"	e	enum:__anon5
MCP2221_I2C_IDLE	All/Open_source_lib/libmcp2221.h	/^	MCP2221_I2C_IDLE = 0,$/;"	e	enum:__anon5
MCP2221_I2C_UNKNOWN1	All/Open_source_lib/libmcp2221.h	/^	MCP2221_I2C_UNKNOWN1 = 98 \/\/ stop timeout$/;"	e	enum:__anon5
MCP2221_INT_TRIG_BOTH	All/Open_source_lib/libmcp2221.h	/^	MCP2221_INT_TRIG_BOTH = 0b00001010		\/**< Trigger on either rising or falling edge (MCP2221_INT_TRIG_RISING | MCP2221_INT_TRIG_FALLING) *\/	\/\/ TODO maybe just OR the 2 values above?$/;"	e	enum:__anon8
MCP2221_INT_TRIG_FALLING	All/Open_source_lib/libmcp2221.h	/^	MCP2221_INT_TRIG_FALLING = 0b00000010,	\/**< Trigger on falling edge *\/$/;"	e	enum:__anon8
MCP2221_INT_TRIG_INVALID	All/Open_source_lib/libmcp2221.h	/^	MCP2221_INT_TRIG_INVALID = 0,			\/**< Invalid *\/$/;"	e	enum:__anon8
MCP2221_INT_TRIG_RISING	All/Open_source_lib/libmcp2221.h	/^	MCP2221_INT_TRIG_RISING = 0b00001000,	\/**< Trigger on rising edge *\/$/;"	e	enum:__anon8
MCP2221_INVALID_ARG	All/Open_source_lib/libmcp2221.h	/^	MCP2221_INVALID_ARG = -2,	\/**< Invalid argument supplied, probably a null pointer *\/$/;"	e	enum:__anon4
MCP2221_PASS_CHANGE	All/MCP_lib/mcp2221_dll_um.h	237;"	d
MCP2221_PASS_DISABLE	All/MCP_lib/mcp2221_dll_um.h	236;"	d
MCP2221_PASS_ENABLE	All/MCP_lib/mcp2221_dll_um.h	235;"	d
MCP2221_PWRSRC_BUSPOWERED	All/Open_source_lib/libmcp2221.h	/^	MCP2221_PWRSRC_BUSPOWERED = 0$/;"	e	enum:__anon12
MCP2221_PWRSRC_SELFPOWERED	All/Open_source_lib/libmcp2221.h	/^	MCP2221_PWRSRC_SELFPOWERED = 0x40,$/;"	e	enum:__anon12
MCP2221_REPORT_SIZE	All/Open_source_lib/libmcp2221.h	25;"	d
MCP2221_STR_LEN	All/Open_source_lib/libmcp2221.h	15;"	d
MCP2221_SUCCESS	All/Open_source_lib/libmcp2221.h	/^	MCP2221_SUCCESS = 0,		\/**< All is well *\/$/;"	e	enum:__anon4
MCP2221_USB_BUS	All/MCP_lib/mcp2221_dll_um.h	231;"	d
MCP2221_USB_REMOTE	All/MCP_lib/mcp2221_dll_um.h	233;"	d
MCP2221_USB_SELF	All/MCP_lib/mcp2221_dll_um.h	232;"	d
MCP2221_WAKEUP_DISABLED	All/Open_source_lib/libmcp2221.h	/^	MCP2221_WAKEUP_DISABLED = 0,	\/**< Disable USB host wakeup *\/$/;"	e	enum:__anon13
MCP2221_WAKEUP_ENABLED	All/Open_source_lib/libmcp2221.h	/^	MCP2221_WAKEUP_ENABLED = 0x20	\/**< Enable USB host wakeup *\/$/;"	e	enum:__anon13
MCP_checkLibrary	All/MCP_lib/MCP2221A.c	/^int MCP_checkLibrary(wchar_t* libVer){$/;"	f
MCP_getDevices	All/MCP_lib/MCP2221A.c	/^int MCP_getDevices(void){$/;"	f
MCP_i2cWrite	All/MCP_lib/MCP2221A.c	/^int MCP_i2cWrite(PCA* pointerPCA, uint8_t regAddr, uint8_t regData){$/;"	f
MCP_i2cWrite	All/Open_source_lib/MCP2221A.c	/^int MCP_i2cWrite(PCA* pointerPCA, uint8_t regAddr, uint8_t regData){$/;"	f
MCP_i2cWrite_proxy	All/MCP_lib/PCA9685.c	/^int MCP_i2cWrite_proxy(PCA* pointerPCA, uint8_t regAddr,uint8_t regData){$/;"	f
MCP_i2cWrite_proxy	All/Open_source_lib/MCP2221A.c	/^int MCP_i2cWrite_proxy(mcp2221_t* device, uint8_t address, void* data, int numByte, mcp2221_i2crw_t type){$/;"	f
MCP_init	All/MCP_lib/MCP2221A.c	/^int MCP_init(void** device){$/;"	f
MCP_init	All/Open_source_lib/MCP2221A.c	/^int MCP_init(mcp2221_t** myDev){$/;"	f
MCP_openDevice_index	All/MCP_lib/MCP2221A.c	/^int MCP_openDevice_index(int index, void** device){$/;"	f
NEW_REPORT	All/Open_source_lib/libmcp2221.c	28;"	d	file:
NO_CHANGE	All/MCP_lib/mcp2221_dll_um.h	197;"	d
PCA	All/MCP_lib/MCP2221A.c	/^typedef struct PCA PCA;$/;"	t	typeref:struct:PCA	file:
PCA	All/MCP_lib/PCA9685.h	/^struct PCA{$/;"	s
PCA	All/MCP_lib/PCA9685.h	/^typedef struct PCA PCA;$/;"	t	typeref:struct:PCA
PCA	All/Open_source_lib/MCP2221A.h	/^typedef struct PCA PCA;$/;"	t	typeref:struct:PCA
PCA	All/Open_source_lib/PCA9685.h	/^struct PCA{$/;"	s
PCA	All/Open_source_lib/PCA9685.h	/^typedef struct PCA PCA;$/;"	t	typeref:struct:PCA
PCA_calcPWM	All/MCP_lib/PCA9685.c	/^int PCA_calcPWM(PCA* pointerPCA, int channelNum, int pwmVal){$/;"	f
PCA_calcPWM	All/Open_source_lib/PCA9685.c	/^int PCA_calcPWM(PCA* pointerPCA, int channelNum, int pwmVal){$/;"	f
PCA_configDevice	All/Open_source_lib/PCA9685.c	/^int PCA_configDevice(PCA* pointerPCA, mcp2221_t** mcp_dev){$/;"	f
PCA_getChannelReg	All/MCP_lib/PCA9685.c	/^int PCA_getChannelReg(int chNum, uint8_t* regList){$/;"	f
PCA_getDeviceAddr	All/MCP_lib/PCA9685.c	/^uint8_t PCA_getDeviceAddr(int deviceNum){$/;"	f
PCA_getDeviceAddr	LUT_device_addr.c	/^uint8_t PCA_getDeviceAddr(int deviceNum){$/;"	f
PCA_getState	All/MCP_lib/PCA9685.c	/^int PCA_getState(PCA*pointerPCA){$/;"	f
PCA_init	All/Open_source_lib/PCA9685.c	/^int PCA_init(PCA* pointerPCA){$/;"	f
PCA_master_getState	All/MCP_lib/PCA9685.c	/^int PCA_master_getState(PCA* headPCA, int numDevices){$/;"	f
PCA_master_init	All/MCP_lib/PCA9685.c	/^int PCA_master_init(int numDevices, PCA** arrayHeader){$/;"	f
PCA_master_restart	All/MCP_lib/PCA9685.c	/^int PCA_master_restart(PCA* master, int numDevices){$/;"	f
PCA_master_writePWM	All/MCP_lib/PCA9685.c	/^int PCA_master_writePWM(PCA* master , writePWM_state mode){$/;"	f
PCA_regDeviceAddr	All/Open_source_lib/PCA9685.c	/^int PCA_regDeviceAddr(PCA* pointerPCA){$/;"	f
PCA_regI2cDriver	All/MCP_lib/PCA9685.c	/^int PCA_regI2cDriver(PCA* pointerPCA, void** mcp_dev){$/;"	f
PCA_regI2cDriver	All/Open_source_lib/PCA9685.c	/^int PCA_regI2cDriver(PCA* pointerPCA, mcp2221_t** mcp_dev){$/;"	f
PCA_reset	All/MCP_lib/PCA9685.c	/^int PCA_reset(PCA* pointerPCA){$/;"	f
PCA_reset	All/Open_source_lib/PCA9685.c	/^int PCA_reset(PCA* pointerPCA){$/;"	f
PCA_setPWM	All/MCP_lib/PCA9685.c	/^int PCA_setPWM(PCA* pointerPCA, int channel, int pwm){$/;"	f
PCA_writePWM	All/Open_source_lib/PCA9685.c	/^int PCA_writePWM(PCA* pointerPCA, writePWM_state mode){$/;"	f
PCA_writePWM_2channel	All/MCP_lib/PCA9685.c	/^int PCA_writePWM_2channel(PCA* pointerPCA, int channelNum, int pwm){$/;"	f
PCA_writePWM_2channel	All/Open_source_lib/PCA9685.c	/^int PCA_writePWM_2channel(PCA* pointerPCA, int channelNum, int pwm){$/;"	f
PCA_writeReg	All/MCP_lib/PCA9685.c	/^int PCA_writeReg(PCA* pointerPCA, uint8_t regAddr, uint8_t regData){$/;"	f
PCA_writeReg	All/Open_source_lib/PCA9685.c	/^int PCA_writeReg(PCA* pointerPCA, uint8_t regAddr, uint8_t regData){$/;"	f
PID	All/MCP_lib/MCP2221A.c	15;"	d	file:
REPORT_SIZE	All/Open_source_lib/libmcp2221.c	19;"	d	file:
RUNTIME_SETTINGS	All/MCP_lib/mcp2221_dll_um.h	195;"	d
SCL	All/Open_source_lib/libmcp2221.h	/^	uint8_t SCL;	\/**< I2C SCL Value *\/$/;"	m	struct:__anon21
SDA	All/Open_source_lib/libmcp2221.h	/^	uint8_t SDA;	\/**< I2C SDA Value *\/$/;"	m	struct:__anon21
SINGLE	All/MCP_lib/PCA9685.h	/^    SINGLE=0,$/;"	e	enum:__anon24
SINGLE	All/Open_source_lib/PCA9685.h	/^    SINGLE=0,$/;"	e	enum:__anon1
SINGLE	Test-switch/main.c	/^    SINGLE=0,$/;"	e	enum:__anon25	file:
TOTAL_PCA_NUM	All/MCP_lib/PCA9685.c	9;"	d	file:
UNUSED	All/Open_source_lib/libmcp2221.c	16;"	d	file:
USB_CMD_FLASHPASS	All/Open_source_lib/libmcp2221.c	/^	USB_CMD_FLASHPASS	= 0xB2,$/;"	e	enum:__anon2	file:
USB_CMD_GETGPIO	All/Open_source_lib/libmcp2221.c	/^	USB_CMD_GETGPIO		= 0x51,$/;"	e	enum:__anon2	file:
USB_CMD_GETSRAM	All/Open_source_lib/libmcp2221.c	/^	USB_CMD_GETSRAM		= 0x61,$/;"	e	enum:__anon2	file:
USB_CMD_I2CREAD	All/Open_source_lib/libmcp2221.c	/^	USB_CMD_I2CREAD		= 0x91,$/;"	e	enum:__anon2	file:
USB_CMD_I2CREAD_GET	All/Open_source_lib/libmcp2221.c	/^	USB_CMD_I2CREAD_GET	= 0x40,$/;"	e	enum:__anon2	file:
USB_CMD_I2CREAD_REPEATSTART	All/Open_source_lib/libmcp2221.c	/^	USB_CMD_I2CREAD_REPEATSTART		= 0x93,$/;"	e	enum:__anon2	file:
USB_CMD_I2CWRITE	All/Open_source_lib/libmcp2221.c	/^	USB_CMD_I2CWRITE	= 0x90,$/;"	e	enum:__anon2	file:
USB_CMD_I2CWRITE_NOSTOP	All/Open_source_lib/libmcp2221.c	/^	USB_CMD_I2CWRITE_NOSTOP			= 0x94,$/;"	e	enum:__anon2	file:
USB_CMD_I2CWRITE_REPEATSTART	All/Open_source_lib/libmcp2221.c	/^	USB_CMD_I2CWRITE_REPEATSTART	= 0x92,$/;"	e	enum:__anon2	file:
USB_CMD_READFLASH	All/Open_source_lib/libmcp2221.c	/^	USB_CMD_READFLASH	= 0xB0,$/;"	e	enum:__anon2	file:
USB_CMD_RESET	All/Open_source_lib/libmcp2221.c	/^	USB_CMD_RESET		= 0x70$/;"	e	enum:__anon2	file:
USB_CMD_SETGPIO	All/Open_source_lib/libmcp2221.c	/^	USB_CMD_SETGPIO		= 0x50,$/;"	e	enum:__anon2	file:
USB_CMD_SETSRAM	All/Open_source_lib/libmcp2221.c	/^	USB_CMD_SETSRAM		= 0x60,$/;"	e	enum:__anon2	file:
USB_CMD_STATUSSET	All/Open_source_lib/libmcp2221.c	/^	USB_CMD_STATUSSET	= 0x10,$/;"	e	enum:__anon2	file:
USB_CMD_WRITEFLASH	All/Open_source_lib/libmcp2221.c	/^	USB_CMD_WRITEFLASH	= 0xB1,$/;"	e	enum:__anon2	file:
USBget	All/Open_source_lib/libmcp2221.c	/^static mcp2221_error USBget(mcp2221_t* device, void* data)$/;"	f	file:
USBsend	All/Open_source_lib/libmcp2221.c	/^static mcp2221_error USBsend(mcp2221_t* device, void* data)$/;"	f	file:
VID	All/MCP_lib/MCP2221A.c	14;"	d	file:
VREF_1024V	All/MCP_lib/mcp2221_dll_um.h	227;"	d
VREF_2048V	All/MCP_lib/mcp2221_dll_um.h	228;"	d
VREF_4096V	All/MCP_lib/mcp2221_dll_um.h	229;"	d
VREF_VDD	All/MCP_lib/mcp2221_dll_um.h	226;"	d
addUsbDevList	All/Open_source_lib/libmcp2221.c	/^static void addUsbDevList(int id, struct hid_device_info* dev2)$/;"	f	file:
address	All/MCP_lib/PCA9685.h	/^    uint8_t address;$/;"	m	struct:PCA
address	All/Open_source_lib/PCA9685.h	/^    uint8_t address;$/;"	m	struct:PCA
blocking	All/Open_source_lib/hid.c	/^	int blocking;$/;"	m	struct:hid_device_	file:
calcPWM	All/MCP_lib/PCA9685.c	/^int calcPWM( int PWM, int delay, int width, int* onCount, int* offCount){$/;"	f
calcPWM	All/Open_source_lib/PCA9685.c	/^int calcPWM( int PWM, int delay, int width, int* onCount, int* offCount){$/;"	f
calcPWM	pwmControl.c	/^int calcPWM(    \/\/ Input $/;"	f
char_getUserInput	All/MCP_lib/io.c	/^int char_getUserInput(const char* msg, char* dataAddr){$/;"	f
char_getUserInput	UserInput-Output/getData.c	/^int char_getUserInput(const char* msg, char* dataAddr){$/;"	f
char_getUserInput	UserInput-Output/io.c	/^int char_getUserInput(const char* msg, char* dataAddr){$/;"	f
checkThing	All/Open_source_lib/libmcp2221.c	/^static int checkThing(wchar_t* val1, wchar_t* val2)$/;"	f	file:
check_fileExists	All/MCP_lib/io.c	/^int check_fileExists(const char * filename){$/;"	f
check_fileExists	All/Open_source_lib/io.c	/^int check_fileExists(const char * filename){$/;"	f
check_fileExists	UserInput-Output/io.c	/^int check_fileExists(const char * filename){$/;"	f
check_fileExists	UserInput-Output/writeFile.c	/^int check_fileExists(const char * filename){$/;"	f
clearReport	All/Open_source_lib/libmcp2221.c	/^static void clearReport(void* report)$/;"	f	file:
clearUsbDevList	All/Open_source_lib/libmcp2221.c	/^static void clearUsbDevList(void)$/;"	f	file:
conf	All/Open_source_lib/libmcp2221.h	/^	mcp2221_gpioconf_t conf[MCP2221_GPIO_COUNT];$/;"	m	struct:__anon23
copy_udev_string	All/Open_source_lib/hid.c	/^static wchar_t *copy_udev_string(struct udev_device *dev, const char *udev_name)$/;"	f	file:
current_channelNum	All/MCP_lib/PCA9685.h	/^    int current_channelNum; \/\/hold current channel of attention$/;"	m	struct:PCA
current_channelNum	All/Open_source_lib/PCA9685.h	/^    int current_channelNum; \/\/hold current channel of attention$/;"	m	struct:PCA
current_pwmVal	All/MCP_lib/PCA9685.h	/^    int current_pwmVal;        \/\/ hold pwm value for current channel$/;"	m	struct:PCA
current_pwmVal	All/Open_source_lib/PCA9685.h	/^    int current_pwmVal;        \/\/ hold pwm value for current channel$/;"	m	struct:PCA
debug_printf	All/Open_source_lib/libmcp2221.c	31;"	d	file:
debug_printf	All/Open_source_lib/libmcp2221.c	34;"	d	file:
debug_puts	All/Open_source_lib/libmcp2221.c	32;"	d	file:
debug_puts	All/Open_source_lib/libmcp2221.c	35;"	d	file:
detect_kernel_version	All/Open_source_lib/hid.c	/^static __u32 detect_kernel_version(void)$/;"	f	file:
devList	All/Open_source_lib/libmcp2221.c	/^static device_list_t* devList;$/;"	v	file:
devPath	All/Open_source_lib/libmcp2221.c	/^	char* devPath;			\/\/ Device path (this is unique to each physical device)$/;"	m	struct:device_list_t	file:
deviceNum	All/MCP_lib/PCA9685.h	/^    int deviceNum;$/;"	m	struct:PCA
deviceNum	All/Open_source_lib/PCA9685.h	/^    int deviceNum;$/;"	m	struct:PCA
device_handle	All/Open_source_lib/hid.c	/^	int device_handle;$/;"	m	struct:hid_device_	file:
device_list_t	All/Open_source_lib/libmcp2221.c	/^struct device_list_t{$/;"	s	file:
device_list_t	All/Open_source_lib/libmcp2221.c	/^typedef struct device_list_t device_list_t;$/;"	t	typeref:struct:device_list_t	file:
device_string_id	All/Open_source_lib/hid.c	/^enum device_string_id {$/;"	g	file:
device_string_names	All/Open_source_lib/hid.c	/^const char *device_string_names[] = {$/;"	v
direction	All/Open_source_lib/libmcp2221.h	/^	mcp2221_gpio_direction_t direction;	\/**< Direction (GPIO mode only) *\/$/;"	m	struct:__anon22
doTransaction	All/Open_source_lib/libmcp2221.c	/^static mcp2221_error doTransaction(mcp2221_t* device, uint8_t* report)$/;"	f	file:
doUSBget	All/Open_source_lib/libmcp2221.c	/^static mcp2221_error doUSBget(hid_device* handle, void* data)$/;"	f	file:
doUSBsend	All/Open_source_lib/libmcp2221.c	/^static mcp2221_error doUSBsend(hid_device* handle, void* data)$/;"	f	file:
factorySerial	All/Open_source_lib/libmcp2221.h	/^	char factorySerial[60];					\/**< Factory serial *\/$/;"	m	struct:__anon19
factorySerialLen	All/Open_source_lib/libmcp2221.h	/^	uint8_t factorySerialLen;				\/**< Factory serial length (usually 8) *\/$/;"	m	struct:__anon19
firmware	All/Open_source_lib/libmcp2221.h	/^	char firmware[2];						\/**< Firmware version *\/$/;"	m	struct:__anon19
flash_section_t	All/Open_source_lib/libmcp2221.c	/^}flash_section_t;$/;"	t	typeref:enum:__anon3	file:
getChannelReg	All/Open_source_lib/PCA9685.c	/^int getChannelReg(int chNum, uint8_t* regList){$/;"	f
getChannelReg	LUT_PCA9685_reg.c	/^int getChannelReg(int chNum, uint8_t* regList){$/;"	f
getDescriptor	All/Open_source_lib/libmcp2221.c	/^static mcp2221_error getDescriptor(mcp2221_t* device, uint8_t* report, wchar_t* dest, flash_section_t descriptor)$/;"	f	file:
getDescriptor2	All/Open_source_lib/libmcp2221.c	/^static mcp2221_error getDescriptor2(mcp2221_t* device, wchar_t* buffer, flash_section_t section)$/;"	f	file:
getResponse	All/Open_source_lib/libmcp2221.c	/^static mcp2221_error getResponse(mcp2221_t* device, uint8_t* report, uint8_t type)$/;"	f	file:
getUSBInfo	All/Open_source_lib/libmcp2221.c	/^static mcp2221_error getUSBInfo(mcp2221_t* device)$/;"	f	file:
getUserInput	All/MCP_lib/io.c	/^int getUserInput(const char* msg, int* dataAddr, int lowBound, int upBound){$/;"	f
getUserInput	All/Open_source_lib/io.c	/^int getUserInput(   const char* msg, int* dataAddr, int lowBound, int upBound){$/;"	f
getUserInput	UserInput-Output/getData.c	/^int getUserInput(   const char* msg, \/\/ string message UI$/;"	f
getUserInput	UserInput-Output/io.c	/^int getUserInput(const char* msg, int* dataAddr, int lowBound, int upBound){$/;"	f
get_device_string	All/Open_source_lib/hid.c	/^static int get_device_string(hid_device *dev, enum device_string_id key, wchar_t *string, size_t maxlen)$/;"	f	file:
gpioCache	All/Open_source_lib/libmcp2221.h	/^	uint8_t gpioCache[MCP2221_GPIO_COUNT];	\/**< GPIO config cache *\/$/;"	m	struct:__anon20
gpios	All/Open_source_lib/libmcp2221.h	/^	int gpios;							\/**< Which pins to operate on (see ::mcp2221_gpio_t) *\/ \/\/ TODO: change to mcp2221_gpio_t ?$/;"	m	struct:__anon22
handle	All/Open_source_lib/libmcp2221.h	/^	void* handle;	\/**< Device handle *\/$/;"	m	struct:__anon20
hardware	All/Open_source_lib/libmcp2221.h	/^	char hardware[2];						\/**< Hardware version *\/$/;"	m	struct:__anon19
hid_close	All/Open_source_lib/hid.c	/^void HID_API_EXPORT hid_close(hid_device *dev)$/;"	f
hid_device	All/Open_source_lib/hidapi.h	/^		typedef struct hid_device_ hid_device; \/**< opaque hidapi structure *\/$/;"	t	typeref:struct:hid_device_
hid_device_	All/Open_source_lib/hid.c	/^struct hid_device_ {$/;"	s	file:
hid_device_info	All/Open_source_lib/hidapi.h	/^		struct hid_device_info {$/;"	s
hid_enumerate	All/Open_source_lib/hid.c	/^struct hid_device_info  HID_API_EXPORT *hid_enumerate(unsigned short vendor_id, unsigned short product_id)$/;"	f
hid_error	All/Open_source_lib/hid.c	/^HID_API_EXPORT const wchar_t * HID_API_CALL  hid_error(hid_device *dev)$/;"	f
hid_exit	All/Open_source_lib/hid.c	/^int HID_API_EXPORT hid_exit(void)$/;"	f
hid_free_enumeration	All/Open_source_lib/hid.c	/^void  HID_API_EXPORT hid_free_enumeration(struct hid_device_info *devs)$/;"	f
hid_get_feature_report	All/Open_source_lib/hid.c	/^int HID_API_EXPORT hid_get_feature_report(hid_device *dev, unsigned char *data, size_t length)$/;"	f
hid_get_indexed_string	All/Open_source_lib/hid.c	/^int HID_API_EXPORT_CALL hid_get_indexed_string(hid_device *dev, int string_index, wchar_t *string, size_t maxlen)$/;"	f
hid_get_manufacturer_string	All/Open_source_lib/hid.c	/^int HID_API_EXPORT_CALL hid_get_manufacturer_string(hid_device *dev, wchar_t *string, size_t maxlen)$/;"	f
hid_get_product_string	All/Open_source_lib/hid.c	/^int HID_API_EXPORT_CALL hid_get_product_string(hid_device *dev, wchar_t *string, size_t maxlen)$/;"	f
hid_get_serial_number_string	All/Open_source_lib/hid.c	/^int HID_API_EXPORT_CALL hid_get_serial_number_string(hid_device *dev, wchar_t *string, size_t maxlen)$/;"	f
hid_init	All/Open_source_lib/hid.c	/^int HID_API_EXPORT hid_init(void)$/;"	f
hid_open	All/Open_source_lib/hid.c	/^hid_device * hid_open(unsigned short vendor_id, unsigned short product_id, const wchar_t *serial_number)$/;"	f
hid_open_path	All/Open_source_lib/hid.c	/^hid_device * HID_API_EXPORT hid_open_path(const char *path)$/;"	f
hid_read	All/Open_source_lib/hid.c	/^int HID_API_EXPORT hid_read(hid_device *dev, unsigned char *data, size_t length)$/;"	f
hid_read_timeout	All/Open_source_lib/hid.c	/^int HID_API_EXPORT hid_read_timeout(hid_device *dev, unsigned char *data, size_t length, int milliseconds)$/;"	f
hid_send_feature_report	All/Open_source_lib/hid.c	/^int HID_API_EXPORT hid_send_feature_report(hid_device *dev, const unsigned char *data, size_t length)$/;"	f
hid_set_nonblocking	All/Open_source_lib/hid.c	/^int HID_API_EXPORT hid_set_nonblocking(hid_device *dev, int nonblock)$/;"	f
hid_write	All/Open_source_lib/hid.c	/^int HID_API_EXPORT hid_write(hid_device *dev, const unsigned char *data, size_t length)$/;"	f
id	All/Open_source_lib/libmcp2221.c	/^	int id;					\/\/ ID$/;"	m	struct:device_list_t	file:
interface_number	All/Open_source_lib/hidapi.h	/^			int interface_number;$/;"	m	struct:hid_device_info
kernel_version	All/Open_source_lib/hid.c	/^static __u32 kernel_version = 0;$/;"	v	file:
main	All/MCP_lib/main.c	/^int main(void){$/;"	f
main	All/Open_source_lib/main.c	/^int main(void){$/;"	f
main	LUT_PCA9685_reg.c	/^int main(void){$/;"	f
main	LUT_device_addr.c	/^int main(void){$/;"	f
main	Test-addr/main.c	/^int main(void){$/;"	f
main	Test-switch/main.c	/^int main(void){$/;"	f
main	UserInput-Output/getData.c	/^int main(void) {$/;"	f
main	UserInput-Output/writeFile.c	/^int main (){$/;"	f
main	pwmControl.c	/^int main(void){$/;"	f
manufacturer	All/Open_source_lib/libmcp2221.h	/^	wchar_t manufacturer[MCP2221_STR_LEN];	\/**< Enumerated manufacturer descriptor *\/$/;"	m	struct:__anon19
manufacturer_string	All/Open_source_lib/hidapi.h	/^			wchar_t *manufacturer_string;$/;"	m	struct:hid_device_info
mcp2221_GPIOConfInit	All/Open_source_lib/libmcp2221.c	/^mcp2221_gpioconfset_t LIB_EXPORT mcp2221_GPIOConfInit()$/;"	f
mcp2221_adc_ref_t	All/Open_source_lib/libmcp2221.h	/^}mcp2221_adc_ref_t;$/;"	t	typeref:enum:__anon7
mcp2221_clearInterrupt	All/Open_source_lib/libmcp2221.c	/^mcp2221_error LIB_EXPORT mcp2221_clearInterrupt(mcp2221_t* device)$/;"	f
mcp2221_clkdiv_t	All/Open_source_lib/libmcp2221.h	/^}mcp2221_clkdiv_t;$/;"	t	typeref:enum:__anon14
mcp2221_clkduty_t	All/Open_source_lib/libmcp2221.h	/^}mcp2221_clkduty_t;$/;"	t	typeref:enum:__anon15
mcp2221_close	All/Open_source_lib/libmcp2221.c	/^void LIB_EXPORT mcp2221_close(mcp2221_t* device)$/;"	f
mcp2221_dac_ref_t	All/Open_source_lib/libmcp2221.h	/^}mcp2221_dac_ref_t;$/;"	t	typeref:enum:__anon6
mcp2221_dedipin_t	All/Open_source_lib/libmcp2221.h	/^}mcp2221_dedipin_t;$/;"	t	typeref:enum:__anon17
mcp2221_error	All/Open_source_lib/libmcp2221.h	/^}mcp2221_error;$/;"	t	typeref:enum:__anon4
mcp2221_exit	All/Open_source_lib/libmcp2221.c	/^void LIB_EXPORT mcp2221_exit()$/;"	f
mcp2221_find	All/Open_source_lib/libmcp2221.c	/^int LIB_EXPORT mcp2221_find(int vid, int pid, wchar_t* manufacturer, wchar_t* product, wchar_t* serial)$/;"	f
mcp2221_getADC	All/Open_source_lib/libmcp2221.c	/^mcp2221_error LIB_EXPORT mcp2221_getADC(mcp2221_t* device, mcp2221_adc_ref_t* ref)$/;"	f
mcp2221_getClockOut	All/Open_source_lib/libmcp2221.c	/^mcp2221_error LIB_EXPORT mcp2221_getClockOut(mcp2221_t* device, mcp2221_clkdiv_t* div, mcp2221_clkduty_t* duty)$/;"	f
mcp2221_getDAC	All/Open_source_lib/libmcp2221.c	/^mcp2221_error LIB_EXPORT mcp2221_getDAC(mcp2221_t* device, mcp2221_dac_ref_t* ref, int* value)$/;"	f
mcp2221_getGPIO	All/Open_source_lib/libmcp2221.c	/^mcp2221_error LIB_EXPORT mcp2221_getGPIO(mcp2221_t* device, mcp2221_gpioconfset_t* confGet)$/;"	f
mcp2221_getInterrupt	All/Open_source_lib/libmcp2221.c	/^mcp2221_error LIB_EXPORT mcp2221_getInterrupt(mcp2221_t* device, mcp2221_int_trig_t* trig)$/;"	f
mcp2221_gpio_direction_t	All/Open_source_lib/libmcp2221.h	/^}mcp2221_gpio_direction_t;$/;"	t	typeref:enum:__anon11
mcp2221_gpio_mode_t	All/Open_source_lib/libmcp2221.h	/^}mcp2221_gpio_mode_t;$/;"	t	typeref:enum:__anon9
mcp2221_gpio_t	All/Open_source_lib/libmcp2221.h	/^}mcp2221_gpio_t;$/;"	t	typeref:enum:__anon18
mcp2221_gpio_value_t	All/Open_source_lib/libmcp2221.h	/^}mcp2221_gpio_value_t;$/;"	t	typeref:enum:__anon10
mcp2221_gpioconf_t	All/Open_source_lib/libmcp2221.h	/^}mcp2221_gpioconf_t;$/;"	t	typeref:struct:__anon22
mcp2221_gpioconfset_t	All/Open_source_lib/libmcp2221.h	/^}mcp2221_gpioconfset_t;$/;"	t	typeref:struct:__anon23
mcp2221_i2cCancel	All/Open_source_lib/libmcp2221.c	/^mcp2221_error LIB_EXPORT mcp2221_i2cCancel(mcp2221_t* device)$/;"	f
mcp2221_i2cDivider	All/Open_source_lib/libmcp2221.c	/^mcp2221_error LIB_EXPORT mcp2221_i2cDivider(mcp2221_t* device, int i2cdiv)$/;"	f
mcp2221_i2cGet	All/Open_source_lib/libmcp2221.c	/^mcp2221_error LIB_EXPORT mcp2221_i2cGet(mcp2221_t* device, void* data, int len)$/;"	f
mcp2221_i2cRead	All/Open_source_lib/libmcp2221.c	/^mcp2221_error LIB_EXPORT mcp2221_i2cRead(mcp2221_t* device, int address, int len, mcp2221_i2crw_t type)$/;"	f
mcp2221_i2cReadPins	All/Open_source_lib/libmcp2221.c	/^mcp2221_error LIB_EXPORT mcp2221_i2cReadPins(mcp2221_t* device, mcp2221_i2cpins_t* pins)$/;"	f
mcp2221_i2cState	All/Open_source_lib/libmcp2221.c	/^mcp2221_error LIB_EXPORT mcp2221_i2cState(mcp2221_t* device, mcp2221_i2c_state_t* state)$/;"	f
mcp2221_i2cWrite	All/Open_source_lib/libmcp2221.c	/^mcp2221_error LIB_EXPORT mcp2221_i2cWrite(mcp2221_t* device, int address, void* data, int len, mcp2221_i2crw_t type)$/;"	f
mcp2221_i2c_state_t	All/Open_source_lib/libmcp2221.h	/^}mcp2221_i2c_state_t;$/;"	t	typeref:enum:__anon5
mcp2221_i2cpins_t	All/Open_source_lib/libmcp2221.h	/^}mcp2221_i2cpins_t;$/;"	t	typeref:struct:__anon21
mcp2221_i2crw_t	All/Open_source_lib/libmcp2221.h	/^}mcp2221_i2crw_t;$/;"	t	typeref:enum:__anon16
mcp2221_init	All/Open_source_lib/libmcp2221.c	/^mcp2221_error LIB_EXPORT mcp2221_init()$/;"	f
mcp2221_int_trig_t	All/Open_source_lib/libmcp2221.h	/^}mcp2221_int_trig_t;$/;"	t	typeref:enum:__anon8
mcp2221_isConnected	All/Open_source_lib/libmcp2221.c	/^mcp2221_error LIB_EXPORT mcp2221_isConnected(mcp2221_t* device)$/;"	f
mcp2221_loadADC	All/Open_source_lib/libmcp2221.c	/^mcp2221_error LIB_EXPORT mcp2221_loadADC(mcp2221_t* device, mcp2221_adc_ref_t* ref)$/;"	f
mcp2221_loadClockOut	All/Open_source_lib/libmcp2221.c	/^mcp2221_error LIB_EXPORT mcp2221_loadClockOut(mcp2221_t* device, mcp2221_clkdiv_t* div, mcp2221_clkduty_t* duty)$/;"	f
mcp2221_loadDAC	All/Open_source_lib/libmcp2221.c	/^mcp2221_error LIB_EXPORT mcp2221_loadDAC(mcp2221_t* device, mcp2221_dac_ref_t* ref, int* value)$/;"	f
mcp2221_loadGPIOConf	All/Open_source_lib/libmcp2221.c	/^mcp2221_error LIB_EXPORT mcp2221_loadGPIOConf(mcp2221_t* device, mcp2221_gpioconfset_t* confGet)$/;"	f
mcp2221_loadInterrupt	All/Open_source_lib/libmcp2221.c	/^mcp2221_error LIB_EXPORT mcp2221_loadInterrupt(mcp2221_t* device, mcp2221_int_trig_t* trig)$/;"	f
mcp2221_loadManufacturer	All/Open_source_lib/libmcp2221.c	/^mcp2221_error LIB_EXPORT mcp2221_loadManufacturer(mcp2221_t* device, wchar_t* buffer)$/;"	f
mcp2221_loadMilliamps	All/Open_source_lib/libmcp2221.c	/^mcp2221_error LIB_EXPORT mcp2221_loadMilliamps(mcp2221_t* device, int* milliamps)$/;"	f
mcp2221_loadPolarity	All/Open_source_lib/libmcp2221.c	/^mcp2221_error LIB_EXPORT mcp2221_loadPolarity(mcp2221_t* device, mcp2221_dedipin_t pin, int* polarity)$/;"	f
mcp2221_loadPowerSource	All/Open_source_lib/libmcp2221.c	/^mcp2221_error LIB_EXPORT mcp2221_loadPowerSource(mcp2221_t* device, mcp2221_pwrsrc_t* source)$/;"	f
mcp2221_loadProduct	All/Open_source_lib/libmcp2221.c	/^mcp2221_error LIB_EXPORT mcp2221_loadProduct(mcp2221_t* device, wchar_t* buffer)$/;"	f
mcp2221_loadRemoteWakeup	All/Open_source_lib/libmcp2221.c	/^mcp2221_error LIB_EXPORT mcp2221_loadRemoteWakeup(mcp2221_t* device, mcp2221_wakeup_t* wakeup)$/;"	f
mcp2221_loadSerial	All/Open_source_lib/libmcp2221.c	/^mcp2221_error LIB_EXPORT mcp2221_loadSerial(mcp2221_t* device, wchar_t* buffer)$/;"	f
mcp2221_loadSerialEnumerate	All/Open_source_lib/libmcp2221.c	/^mcp2221_error LIB_EXPORT mcp2221_loadSerialEnumerate(mcp2221_t* device, int* enumerate)$/;"	f
mcp2221_loadVIDPID	All/Open_source_lib/libmcp2221.c	/^mcp2221_error mcp2221_loadVIDPID(mcp2221_t* device, int* vid, int* pid)$/;"	f
mcp2221_open	All/Open_source_lib/libmcp2221.c	/^mcp2221_t* LIB_EXPORT mcp2221_open()$/;"	f
mcp2221_open_byIndex	All/Open_source_lib/libmcp2221.c	/^mcp2221_t* LIB_EXPORT mcp2221_open_byIndex(int idx)$/;"	f
mcp2221_open_bySerial	All/Open_source_lib/libmcp2221.c	/^mcp2221_t* LIB_EXPORT mcp2221_open_bySerial(wchar_t* serial)$/;"	f
mcp2221_pwrsrc_t	All/Open_source_lib/libmcp2221.h	/^}mcp2221_pwrsrc_t;$/;"	t	typeref:enum:__anon12
mcp2221_rawReport	All/Open_source_lib/libmcp2221.c	/^mcp2221_error LIB_EXPORT mcp2221_rawReport(mcp2221_t* device, uint8_t* report)$/;"	f
mcp2221_readADC	All/Open_source_lib/libmcp2221.c	/^mcp2221_error LIB_EXPORT mcp2221_readADC(mcp2221_t* device, int values[MCP2221_ADC_COUNT])$/;"	f
mcp2221_readGPIO	All/Open_source_lib/libmcp2221.c	/^mcp2221_error LIB_EXPORT mcp2221_readGPIO(mcp2221_t* device, mcp2221_gpio_value_t values[MCP2221_GPIO_COUNT])$/;"	f
mcp2221_readInterrupt	All/Open_source_lib/libmcp2221.c	/^mcp2221_error LIB_EXPORT mcp2221_readInterrupt(mcp2221_t* device, int* state)$/;"	f
mcp2221_reset	All/Open_source_lib/libmcp2221.c	/^mcp2221_error LIB_EXPORT mcp2221_reset(mcp2221_t* device)$/;"	f
mcp2221_sameDevice	All/Open_source_lib/libmcp2221.c	/^int LIB_EXPORT mcp2221_sameDevice(mcp2221_t* dev1, mcp2221_t* dev2)$/;"	f
mcp2221_saveADC	All/Open_source_lib/libmcp2221.c	/^mcp2221_error LIB_EXPORT mcp2221_saveADC(mcp2221_t* device, mcp2221_adc_ref_t ref)$/;"	f
mcp2221_saveClockOut	All/Open_source_lib/libmcp2221.c	/^mcp2221_error LIB_EXPORT mcp2221_saveClockOut(mcp2221_t* device, mcp2221_clkdiv_t clkdiv, mcp2221_clkduty_t duty)$/;"	f
mcp2221_saveDAC	All/Open_source_lib/libmcp2221.c	/^mcp2221_error LIB_EXPORT mcp2221_saveDAC(mcp2221_t* device, mcp2221_dac_ref_t ref, int value)$/;"	f
mcp2221_saveGPIOConf	All/Open_source_lib/libmcp2221.c	/^mcp2221_error LIB_EXPORT mcp2221_saveGPIOConf(mcp2221_t* device, mcp2221_gpioconfset_t* confSet)$/;"	f
mcp2221_saveInterrupt	All/Open_source_lib/libmcp2221.c	/^mcp2221_error LIB_EXPORT mcp2221_saveInterrupt(mcp2221_t* device, mcp2221_int_trig_t trig)$/;"	f
mcp2221_saveManufacturer	All/Open_source_lib/libmcp2221.c	/^mcp2221_error LIB_EXPORT mcp2221_saveManufacturer(mcp2221_t* device, wchar_t* buffer)$/;"	f
mcp2221_saveMilliamps	All/Open_source_lib/libmcp2221.c	/^mcp2221_error LIB_EXPORT mcp2221_saveMilliamps(mcp2221_t* device, int milliamps)$/;"	f
mcp2221_savePolarity	All/Open_source_lib/libmcp2221.c	/^mcp2221_error LIB_EXPORT mcp2221_savePolarity(mcp2221_t* device, mcp2221_dedipin_t pin, int polarity)$/;"	f
mcp2221_savePowerSource	All/Open_source_lib/libmcp2221.c	/^mcp2221_error LIB_EXPORT mcp2221_savePowerSource(mcp2221_t* device, mcp2221_pwrsrc_t source)$/;"	f
mcp2221_saveProduct	All/Open_source_lib/libmcp2221.c	/^mcp2221_error LIB_EXPORT mcp2221_saveProduct(mcp2221_t* device, wchar_t* buffer)$/;"	f
mcp2221_saveRemoteWakeup	All/Open_source_lib/libmcp2221.c	/^mcp2221_error LIB_EXPORT mcp2221_saveRemoteWakeup(mcp2221_t* device, mcp2221_wakeup_t wakeup)$/;"	f
mcp2221_saveSerial	All/Open_source_lib/libmcp2221.c	/^mcp2221_error LIB_EXPORT mcp2221_saveSerial(mcp2221_t* device, wchar_t* buffer)$/;"	f
mcp2221_saveSerialEnumerate	All/Open_source_lib/libmcp2221.c	/^mcp2221_error LIB_EXPORT mcp2221_saveSerialEnumerate(mcp2221_t* device, int enumerate)$/;"	f
mcp2221_saveVIDPID	All/Open_source_lib/libmcp2221.c	/^mcp2221_error LIB_EXPORT mcp2221_saveVIDPID(mcp2221_t* device, int vid, int pid)$/;"	f
mcp2221_setADC	All/Open_source_lib/libmcp2221.c	/^mcp2221_error LIB_EXPORT mcp2221_setADC(mcp2221_t* device, mcp2221_adc_ref_t ref)$/;"	f
mcp2221_setClockOut	All/Open_source_lib/libmcp2221.c	/^mcp2221_error LIB_EXPORT mcp2221_setClockOut(mcp2221_t* device, mcp2221_clkdiv_t div, mcp2221_clkduty_t duty)$/;"	f
mcp2221_setDAC	All/Open_source_lib/libmcp2221.c	/^mcp2221_error LIB_EXPORT mcp2221_setDAC(mcp2221_t* device, mcp2221_dac_ref_t ref, int value)$/;"	f
mcp2221_setGPIO	All/Open_source_lib/libmcp2221.c	/^mcp2221_error LIB_EXPORT mcp2221_setGPIO(mcp2221_t* device, mcp2221_gpio_t pins, mcp2221_gpio_value_t value)$/;"	f
mcp2221_setGPIOConf	All/Open_source_lib/libmcp2221.c	/^mcp2221_error LIB_EXPORT mcp2221_setGPIOConf(mcp2221_t* device, mcp2221_gpioconfset_t* confSet)$/;"	f
mcp2221_setInterrupt	All/Open_source_lib/libmcp2221.c	/^mcp2221_error LIB_EXPORT mcp2221_setInterrupt(mcp2221_t* device, mcp2221_int_trig_t trig, int clearInt)$/;"	f
mcp2221_t	All/Open_source_lib/libmcp2221.h	/^}mcp2221_t;$/;"	t	typeref:struct:__anon20
mcp2221_usbinfo_t	All/Open_source_lib/libmcp2221.h	/^}mcp2221_usbinfo_t;$/;"	t	typeref:struct:__anon19
mcp2221_wakeup_t	All/Open_source_lib/libmcp2221.h	/^}mcp2221_wakeup_t;$/;"	t	typeref:enum:__anon13
mcp_dev	All/MCP_lib/PCA9685.h	/^    void** mcp_dev;$/;"	m	struct:PCA
mcp_dev	All/Open_source_lib/PCA9685.h	/^    mcp2221_t** mcp_dev;$/;"	m	struct:PCA
milliamps	All/Open_source_lib/libmcp2221.h	/^	int milliamps;							\/**< Enumerated current limit *\/$/;"	m	struct:__anon19
mode	All/Open_source_lib/libmcp2221.h	/^	mcp2221_gpio_mode_t mode;			\/**< Mode *\/$/;"	m	struct:__anon22
new_hid_device	All/Open_source_lib/hid.c	/^static hid_device *new_hid_device(void)$/;"	f	file:
next	All/Open_source_lib/hidapi.h	/^			struct hid_device_info *next;$/;"	m	struct:hid_device_info	typeref:struct:hid_device_info::hid_device_info
next	All/Open_source_lib/libmcp2221.c	/^	device_list_t* next;	\/\/ Next device in list$/;"	m	struct:device_list_t	file:
offCount	All/MCP_lib/PCA9685.h	/^    int offCount[16];$/;"	m	struct:PCA
offCount	All/Open_source_lib/PCA9685.h	/^    int offCount[16];$/;"	m	struct:PCA
onCount	All/MCP_lib/PCA9685.h	/^    int onCount[16];$/;"	m	struct:PCA
onCount	All/Open_source_lib/PCA9685.h	/^    int onCount[16];$/;"	m	struct:PCA
open	All/Open_source_lib/libmcp2221.c	/^static mcp2221_t* open(char* devPath)$/;"	f	file:
parse_uevent_info	All/Open_source_lib/hid.c	/^parse_uevent_info(const char *uevent, int *bus_type,$/;"	f	file:
path	All/Open_source_lib/hidapi.h	/^			char *path;$/;"	m	struct:hid_device_info
path	All/Open_source_lib/libmcp2221.h	/^	char* path;		\/**< Device path, used to identify the physical device *\/$/;"	m	struct:__anon20
pid	All/Open_source_lib/libmcp2221.h	/^	int pid;								\/**< PID *\/$/;"	m	struct:__anon19
powerSource	All/Open_source_lib/libmcp2221.h	/^	mcp2221_pwrsrc_t powerSource;			\/**< Power source *\/$/;"	m	struct:__anon19
printArray	Test-addr/main.c	/^int printArray(int* array, int len){$/;"	f
print_uint_array	LUT_PCA9685_reg.c	/^int print_uint_array(uint8_t* arr, int size){$/;"	f
product	All/Open_source_lib/libmcp2221.h	/^	wchar_t product[MCP2221_STR_LEN];		\/**< Enumerated product descriptor *\/$/;"	m	struct:__anon19
product_id	All/Open_source_lib/hidapi.h	/^			unsigned short product_id;$/;"	m	struct:hid_device_info
product_string	All/Open_source_lib/hidapi.h	/^			wchar_t *product_string;$/;"	m	struct:hid_device_info
pwmVal	All/MCP_lib/PCA9685.h	/^    int pwmVal[16];$/;"	m	struct:PCA
pwmVal	All/Open_source_lib/PCA9685.h	/^    int pwmVal[16];$/;"	m	struct:PCA
release_number	All/Open_source_lib/hidapi.h	/^			unsigned short release_number;$/;"	m	struct:hid_device_info
remoteWakeup	All/Open_source_lib/libmcp2221.h	/^	mcp2221_wakeup_t remoteWakeup;			\/**< Remote USB host wakeup *\/$/;"	m	struct:__anon19
roundNo	All/MCP_lib/PCA9685.c	/^int roundNo(float num){ $/;"	f
roundNo	All/Open_source_lib/PCA9685.c	/^int roundNo(float num){ $/;"	f
saveReport	All/Open_source_lib/libmcp2221.c	/^static int saveReport(mcp2221_t* device, uint8_t* report)$/;"	f	file:
saveReportUpdate	All/Open_source_lib/libmcp2221.c	/^static void saveReportUpdate(uint8_t* report, uint8_t* reportUpdate)$/;"	f	file:
serial	All/Open_source_lib/libmcp2221.c	/^	wchar_t* serial;		\/\/ Serial number$/;"	m	struct:device_list_t	file:
serial	All/Open_source_lib/libmcp2221.h	/^	wchar_t serial[MCP2221_STR_LEN];		\/**< Enumerated serial descriptor *\/$/;"	m	struct:__anon19
serial_number	All/Open_source_lib/hidapi.h	/^			wchar_t *serial_number;$/;"	m	struct:hid_device_info
setArray	Test-addr/main.c	/^int setArray(int* array, int len, int val){$/;"	f
setDescriptor	All/Open_source_lib/libmcp2221.c	/^static mcp2221_error setDescriptor(mcp2221_t* device, wchar_t* buffer, flash_section_t section)$/;"	f	file:
setReport	All/Open_source_lib/libmcp2221.c	/^static mcp2221_error setReport(mcp2221_t* device, uint8_t* report, uint8_t type)$/;"	f	file:
updateGPIOCache	All/Open_source_lib/libmcp2221.c	/^static mcp2221_error updateGPIOCache(mcp2221_t* device)$/;"	f	file:
usage	All/Open_source_lib/hidapi.h	/^			unsigned short usage;$/;"	m	struct:hid_device_info
usage_page	All/Open_source_lib/hidapi.h	/^			unsigned short usage_page;$/;"	m	struct:hid_device_info
usbInfo	All/Open_source_lib/libmcp2221.h	/^	mcp2221_usbinfo_t usbInfo;$/;"	m	struct:__anon20
usb_cmd_t	All/Open_source_lib/libmcp2221.c	/^}usb_cmd_t;$/;"	t	typeref:enum:__anon2	file:
uses_numbered_reports	All/Open_source_lib/hid.c	/^	int uses_numbered_reports;$/;"	m	struct:hid_device_	file:
uses_numbered_reports	All/Open_source_lib/hid.c	/^static int uses_numbered_reports(__u8 *report_descriptor, __u32 size) {$/;"	f	file:
utf8_to_wchar_t	All/Open_source_lib/hid.c	/^static wchar_t *utf8_to_wchar_t(const char *utf8)$/;"	f	file:
value	All/Open_source_lib/libmcp2221.h	/^	mcp2221_gpio_value_t value;			\/**< Value (GPIO mode only) *\/$/;"	m	struct:__anon22
vendor_id	All/Open_source_lib/hidapi.h	/^			unsigned short vendor_id;$/;"	m	struct:hid_device_info
vid	All/Open_source_lib/libmcp2221.h	/^	int vid;								\/**< VID *\/$/;"	m	struct:__anon19
write2file	UserInput-Output/writeFile.c	/^int write2file(const char* path, const char * mode, int* Arr, int ArrLen){$/;"	f
writeCommand_2file	All/MCP_lib/io.c	/^int writeCommand_2file(const char* path, uint8_t* report, int report_len ){$/;"	f
writeCommand_2file	All/Open_source_lib/io.c	/^int writeCommand_2file(const char* path, uint8_t* report, int report_len ){$/;"	f
writeCommand_2file	UserInput-Output/io.c	/^int writeCommand_2file(const char* path, uint8_t* report, int report_len ){$/;"	f
writeCommand_2file	UserInput-Output/writeFile.c	/^int writeCommand_2file(const char* path, uint8_t* report, int report_len ){$/;"	f
writePWM_state	All/MCP_lib/PCA9685.h	/^} writePWM_state;$/;"	t	typeref:enum:__anon24
writePWM_state	All/Open_source_lib/PCA9685.h	/^} writePWM_state;$/;"	t	typeref:enum:__anon1
writePWM_state	Test-switch/main.c	/^} writePWM_state;$/;"	t	typeref:enum:__anon25	file:
zero	All/MCP_lib/PCA9685.c	/^int zero(int* array, int size){$/;"	f
